@startuml classes
set namespaceSeparator none
class "codelink.backend.document_model.DocumentModel" as codelink.backend.document_model.DocumentModel {
  file_name
  is_modified
  add_test_data() -> None
  get_pretty_file_name() -> str
}
class "codelink.backend.node_factory.NodeFactory" as codelink.backend.node_factory.NodeFactory {
  nodes
  create_node(name: str) -> Optional[NodeItem]
  load_nodes(path: str, name_space: str) -> None
  reset() -> None
}
class "codelink.backend.root_item.RootItem" as codelink.backend.root_item.RootItem {
}
class "codelink.backend.tree_item.TreeItem" as codelink.backend.tree_item.TreeItem {
  children
  parent
  uuid
  append_child(child: TreeItem) -> bool
  child(row: int) -> Optional[TreeItem]
  insert_child(row: int, child: TreeItem) -> bool
  remove_child(row: int) -> bool
  row() -> int
  {abstract}setup_children() -> None
}
class "codelink.backend.tree_model.TreeModel" as codelink.backend.tree_model.TreeModel {
  begin_remove_rows
  edges_index
  frames_index
  nodes_index
  root_item
  undo_stack
  append_item(tree_item: TreeItem, parent) -> QtCore.QModelIndex
  append_node(node_item: NodeItem) -> QtCore.QModelIndex
  columnCount(parent: QtCore.QModelIndex) -> int
  data(index: QtCore.QModelIndex, role: int) -> Any
  flags(index: QtCore.QModelIndex) -> QtCore.Qt.ItemFlags
  from_dict(state: dict[str, Any]) -> TreeItem
  hasChildren(parent: QtCore.QModelIndex) -> bool
  has_parent_recursively(index, parent)
  headerData(section: int, orientation: QtCore.Qt.Orientation, role) -> Any
  index(row: int, column: int, parent: QtCore.QModelIndex) -> QtCore.QModelIndex
  index_from_key(key: str, parent: QtCore.QModelIndex) -> Optional[QtCore.QModelIndex]
  index_from_uuid(uuid: str, column: int) -> Optional[QtCore.QModelIndex]
  insert_item(row: int, tree_item: TreeItem, parent) -> QtCore.QModelIndex
  item_from_index(index: QtCore.QModelIndex) -> TreeItem
  item_from_uuid(uuid: str) -> Optional[TreeItem]
  parent(index: QtCore.QModelIndex) -> QtCore.QModelIndex
  removeRow(row: int, parent) -> bool
  remove_item(row: int, parent) -> bool
  rowCount(parent) -> int
  setData(index: QtCore.QModelIndex, value: Any, role: int) -> bool
  to_dict(parent_index: QtCore.QModelIndex) -> dict[str, Any]
}
class "codelink.frontend.cachable_gr_proxy.CachableGrProxy" as codelink.frontend.cachable_gr_proxy.CachableGrProxy {
  is_selected
  paint(painter: QtGui.QPainter, option: QtWidgets.QStyleOptionGraphicsItem, widget: QtWidgets.QWidget) -> None
  setGeometry(rect: QtCore.QRectF) -> None
  update_cache() -> None
}
class "codelink.frontend.document_view.DocumentView" as codelink.frontend.document_view.DocumentView {
  model
  closeEvent(event: QtGui.QCloseEvent) -> None
  graphics_item_from_index(index: QtCore.QModelIndex) -> Optional[QtWidgets.QGraphicsItem]
  on_model_begin_remove_rows(parent: QtCore.QModelIndex, first_row: int, last_row: int) -> None
  on_model_data_changed(top_left: QtCore.QModelIndex, bottom_right: QtCore.QModelIndex, roles: list[int]) -> None
  on_model_rows_inserted(parent: QtCore.QModelIndex, first_row: int, last_row: int) -> None
  update() -> None
}
class "codelink.frontend.main_window.MainWindow" as codelink.frontend.main_window.MainWindow {
  add_test_data() -> None
  closeEvent(event: QtGui.QCloseEvent) -> None
  create_detail_tree_view() -> TreeView
  create_doc_tree_view() -> TreeView
  create_edit_menu() -> QtWidgets.QMenu
  create_file_menu() -> QtWidgets.QMenu
  create_item_tree_view() -> TreeView
  create_mdi_area() -> QtWidgets.QMdiArea
  create_nodes_menu() -> QtWidgets.QMenu
  delete() -> None
  load_nodes(node_factory: NodeFactory, nodes_path: str, nodes_menu: QtWidgets.QMenu) -> None
  new() -> None
  on_selection_changed(current: QtCore.QItemSelection, previous: QtCore.QItemSelection) -> None
  on_sub_wnd_changed(sub_wnd: QtWidgets.QMdiSubWindow) -> None
  open() -> None
  save() -> None
  save_as() -> None
}
class "codelink.frontend.node_gr_item.NodeGrItem" as codelink.frontend.node_gr_item.NodeGrItem {
  persistent_index
  boundingRect() -> QtCore.QRectF
  create_content() -> CachableGrProxy
  create_pins() -> list[list[QtWidgets.QGraphicsEllipseItem]]
  create_pins_group(sep_index: QtCore.QModelIndex) -> list[QtWidgets.QGraphicsEllipseItem]
  create_title() -> QtWidgets.QGraphicsTextItem
  crop_text(text: str, width: float, font: QtGui.QFont) -> str
  hoverEnterEvent(event: QtWidgets.QGraphicsSceneMouseEvent) -> None
  hoverLeaveEvent(event: QtWidgets.QGraphicsSceneHoverEvent) -> None
  index() -> QtCore.QModelIndex
  itemChange(change: QtWidgets.QGraphicsItem.GraphicsItemChange, value: Any) -> Any
  on_collapsed(index: QtCore.QModelIndex) -> None
  paint(painter: QtGui.QPainter, option: QtWidgets.QStyleOptionGraphicsItem, widget: Optional[QtWidgets.QWidget]) -> None
  update(rect: Optional[QtCore.QRectF]) -> None
  update_content_height() -> None
  update_pins()
  update_position()
  update_title() -> None
}
class "codelink.frontend.tree_view.TreeView" as codelink.frontend.tree_view.TreeView {
  focusNextPrevChild(forward: bool) -> bool
  keyPressEvent(event: QtGui.QKeyEvent) -> None
  visible_row_height() -> int
}
codelink.backend.document_model.DocumentModel --|> codelink.backend.tree_model.TreeModel
codelink.backend.root_item.RootItem --|> codelink.backend.tree_item.TreeItem
codelink.backend.document_model.DocumentModel --* codelink.frontend.main_window.MainWindow : _active_doc_model
codelink.backend.node_factory.NodeFactory --* codelink.frontend.main_window.MainWindow : _node_factory
codelink.backend.root_item.RootItem --* codelink.backend.tree_model.TreeModel : _root_item
codelink.frontend.cachable_gr_proxy.CachableGrProxy --* codelink.frontend.node_gr_item.NodeGrItem : _content_item
codelink.frontend.document_view.DocumentView --* codelink.frontend.main_window.MainWindow : _active_doc_view
codelink.frontend.tree_view.TreeView --* codelink.frontend.main_window.MainWindow : _doc_tree_view
codelink.frontend.tree_view.TreeView --* codelink.frontend.main_window.MainWindow : _item_tree_view
codelink.frontend.tree_view.TreeView --* codelink.frontend.main_window.MainWindow : _detail_tree_view
codelink.backend.document_model.DocumentModel --o codelink.frontend.document_view.DocumentView : _model
@enduml
