@startuml classes
set namespaceSeparator none
class "codelink.backend.base_item.BaseItem" as codelink.backend.base_item.BaseItem {
  key
  value
  create_editor(parent: QtWidgets.QWidget, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex()) -> Optional[QtWidgets.QWidget]
  {abstract}paint(painter: QtGui.QPainter, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex) -> None
  {abstract}set_editor_data(editor: QtWidgets.QWidget, index: QtCore.QModelIndex()) -> None
  set_model_data(editor: QtWidgets.QWidget, model: QtCore.QAbstractItemModel, index: QtCore.QModelIndex()) -> bool
  {abstract}update_editor_geometry(editor: QtWidgets.QWidget, option: QtWidgets.QStyleOptionViewItem, index: QtCore.QModelIndex()) -> None
}
class "codelink.backend.edge_item.EdgeItem" as codelink.backend.edge_item.EdgeItem {
  destination_uuid
  source_uuid
}
class "codelink.backend.node_item.NodeItem" as codelink.backend.node_item.NodeItem {
  pos
  setup_children() -> None
}
class "codelink.backend.property_item.PropertyItem" as codelink.backend.property_item.PropertyItem {
}
class "codelink.backend.root_item.RootItem" as codelink.backend.root_item.RootItem {
}
class "codelink.backend.seperator_item.SeperatorItem" as codelink.backend.seperator_item.SeperatorItem {
}
class "codelink.backend.tree_item.TreeItem" as codelink.backend.tree_item.TreeItem {
  children
  parent
  uuid
  append_child(child: TreeItem) -> bool
  child(row: int) -> Optional[TreeItem]
  insert_child(row: int, child: TreeItem) -> bool
  remove_child(row: int) -> bool
  row() -> int
  {abstract}setup_children() -> None
}
class "codelink.backend.tree_model.TreeModel" as codelink.backend.tree_model.TreeModel {
  edges_index
  frames_index
  nodes_index
  root_item
  undo_stack
  append_item(tree_item: TreeItem, parent) -> QtCore.QModelIndex
  append_node(node_item: NodeItem) -> QtCore.QModelIndex
  columnCount(parent: QtCore.QModelIndex) -> int
  data(index: QtCore.QModelIndex, role: int) -> Any
  flags(index: QtCore.QModelIndex) -> QtCore.Qt.ItemFlags
  from_dict(state: dict[str, Any]) -> TreeItem
  hasChildren(parent: QtCore.QModelIndex) -> bool
  headerData(section: int, orientation: QtCore.Qt.Orientation, role) -> Any
  index(row: int, column: int, parent: QtCore.QModelIndex) -> QtCore.QModelIndex
  index_from_key(key: str, parent: QtCore.QModelIndex) -> Optional[QtCore.QModelIndex]
  index_from_uuid(uuid: str, column: int) -> Optional[QtCore.QModelIndex]
  insert_item(row: int, tree_item: TreeItem, parent) -> QtCore.QModelIndex
  item_from_index(index: QtCore.QModelIndex) -> TreeItem
  item_from_uuid(uuid: str) -> Optional[TreeItem]
  parent(index: QtCore.QModelIndex) -> QtCore.QModelIndex
  removeRow(row: int, parent) -> bool
  remove_item(row: int, parent) -> bool
  rowCount(parent) -> int
  setData(index: QtCore.QModelIndex, value: Any, role: int) -> bool
  to_dict(parent_index: QtCore.QModelIndex) -> dict[str, Any]
}
class "codelink.backend.tree_seperator_item.TreeSeperatorItem" as codelink.backend.tree_seperator_item.TreeSeperatorItem {
}
codelink.backend.base_item.BaseItem --|> codelink.backend.tree_item.TreeItem
codelink.backend.edge_item.EdgeItem --|> codelink.backend.tree_item.TreeItem
codelink.backend.node_item.NodeItem --|> codelink.backend.base_item.BaseItem
codelink.backend.property_item.PropertyItem --|> codelink.backend.base_item.BaseItem
codelink.backend.root_item.RootItem --|> codelink.backend.tree_item.TreeItem
codelink.backend.seperator_item.SeperatorItem --|> codelink.backend.base_item.BaseItem
codelink.backend.tree_seperator_item.TreeSeperatorItem --|> codelink.backend.seperator_item.SeperatorItem
codelink.backend.root_item.RootItem --* codelink.backend.tree_model.TreeModel : _root_item
@enduml
